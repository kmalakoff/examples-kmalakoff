// Generated by CoffeeScript 1.3.3

/*
knockback-inspector.js 0.1.2
(c) 2012 Kevin Malakoff.
Knockback-Inspector.js is freely distributable under the MIT license.
See the following for full license details:
  https://github.com/kmalakoff/knockback-inspector/blob/master/LICENSE
Dependencies: Knockout.js, Underscore.js, Backbone.js, and Knockback.js.
*/


(function() {
  var Backbone, kb, kbi, ko, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = !window._ && (typeof require !== 'undefined') ? require('underscore') : window._;

  if (_ && !_.VERSION) {
    _ = _._;
  }

  Backbone = !window.Backbone && (typeof require !== 'undefined') ? require('backbone') : window.Backbone;

  ko = !window.ko && (typeof require !== 'undefined') ? require('knockout') : window.ko;

  kb = !window.kb && (typeof require !== 'undefined') ? require('knockback') : window.kb;

  kbi = this.kbi = typeof exports !== 'undefined' ? exports : {};

  this.kbi.VERSION = '0.1.2';

  kbi.TemplateSource = (function() {

    function TemplateSource(template_generator, template_data) {
      this.template_generator = template_generator;
      this.template_data = template_data != null ? template_data : {};
    }

    TemplateSource.prototype.data = function(key, value) {
      if (arguments.length === 1) {
        return this.template_data[key];
      }
      return this.template_data[key] = value;
    };

    TemplateSource.prototype.text = function() {
      if (arguments.length > 0) {
        throw 'kbi.TemplateSource: unexpected writing to template source';
      }
      return this.template_generator.viewText(this.template_data);
    };

    return TemplateSource;

  })();

  kbi.TemplateEngine = (function(_super) {

    __extends(TemplateEngine, _super);

    function TemplateEngine() {
      this.allowTemplateRewriting = false;
      this.generators = {
        kbi_model_node: kbi.ModelNodeViewGenerator,
        kbi_collection_node: kbi.CollectionNodeViewGenerator
      };
    }

    TemplateEngine.prototype.generator = function(template_name, generator_class) {
      if (arguments.length === 1) {
        return this.generators[template_name];
      }
      return this.generators[template_name] = generator_class;
    };

    TemplateEngine.prototype.makeTemplateSource = function(template_name) {
      if (this.generators.hasOwnProperty(template_name)) {
        return new kbi.TemplateSource(new this.generators[template_name](template_name));
      }
      return TemplateEngine.__super__.makeTemplateSource.apply(this, arguments);
    };

    TemplateEngine.prototype.renderTemplateSource = function(template_source, binding_context, options) {
      var key, value;
      for (key in binding_context) {
        value = binding_context[key];
        template_source.data(key, value);
      }
      return TemplateEngine.__super__.renderTemplateSource.apply(this, arguments);
    };

    return TemplateEngine;

  })(ko.nativeTemplateEngine);

  kbi.FetchedModel = (function(_super) {

    __extends(FetchedModel, _super);

    function FetchedModel() {
      return FetchedModel.__super__.constructor.apply(this, arguments);
    }

    FetchedModel.prototype.parse = function(response) {
      var attributes, collection, key, model, value;
      attributes = {};
      for (key in response) {
        value = response[key];
        if (_.isObject(value)) {
          model = new kbi.FetchedModel();
          attributes[key] = model.set(model.parse(value));
        } else if (_.isArray(value)) {
          collection = new kbi.FetchedCollection();
          attributes[key] = collection.reset(collection.parse(value));
        } else {
          attributes[key] = value;
        }
      }
      return attributes;
    };

    return FetchedModel;

  })(Backbone.Model);

  kbi.FetchedCollection = (function(_super) {

    __extends(FetchedCollection, _super);

    function FetchedCollection() {
      return FetchedCollection.__super__.constructor.apply(this, arguments);
    }

    FetchedCollection.prototype.model = kbi.FetchedModel;

    FetchedCollection.prototype.parse = function(response) {
      var models;
      models = response.results ? response.results : response;
      return _.map(response.results, function(result) {
        var model;
        model = new kbi.FetchedModel();
        return model.set(model.parse(result));
      });
    };

    return FetchedCollection;

  })(Backbone.Collection);

  kbi.NodeViewModel = (function() {

    function NodeViewModel(name, opened, node) {
      var model;
      this.name = name;
      this.opened = ko.observable(opened);
      this.node = ko.utils.unwrapObservable(node);
      if (this.node instanceof kb.ViewModel) {
        model = kb.utils.wrappedModel(this.node);
        this.attribute_names = ko.observableArray(model ? _.keys(model.attributes) : []);
      }
      this;

    }

    NodeViewModel.prototype.attributeType = function(key) {
      var attribute_connector;
      attribute_connector = this.node[key];
      if (ko.utils.unwrapObservable(attribute_connector) instanceof kb.ViewModel) {
        return 'model';
      }
      if (kb.utils.observableInstanceOf(attribute_connector, kb.CollectionAttributeConnector)) {
        return 'collection';
      }
      return 'simple';
    };

    return NodeViewModel;

  })();

  kbi.nodeViewModel = kbi.nvm = function(name, opened, node) {
    return new kbi.NodeViewModel(name, opened, node);
  };

  kbi.CollectionNodeViewGenerator = (function() {

    function CollectionNodeViewGenerator(template_name) {
      this.template_name = template_name;
    }

    CollectionNodeViewGenerator.prototype.viewText = function(data) {
      return "" + (this.nodeStart(data)) + "\n" + (this.nodeManipulator(data)) + "\n  <!-- ko if: opened -->\n    <!-- ko foreach: node -->\n      " + (this.modelNode(data)) + "\n    <!-- /ko -->\n  <!-- /ko -->\n" + (this.nodeEnd(data));
    };

    CollectionNodeViewGenerator.prototype.nodeStart = function(data) {
      return "<li class='kbi' data-bind=\"css: {opened: opened, closed: !opened()}\">";
    };

    CollectionNodeViewGenerator.prototype.nodeManipulator = function(data) {
      return "<div class='collection' data-bind=\"click: function(){ opened(!opened()) }\">\n  <span data-bind=\"text: (opened() ? '- ' : '+ ' )\"></span>\n  <span data-bind=\"text: name\"></span>\n</div>";
    };

    CollectionNodeViewGenerator.prototype.modelNode = function(data) {
      return "" + (kbi.ViewHTML.modelTree("'['+$index()+']'", false, "$data"));
    };

    CollectionNodeViewGenerator.prototype.nodeEnd = function(data) {
      return "</li>";
    };

    return CollectionNodeViewGenerator;

  })();

  kbi.ModelNodeViewGenerator = (function() {

    function ModelNodeViewGenerator(template_name) {
      this.template_name = template_name;
    }

    ModelNodeViewGenerator.prototype.viewText = function(data) {
      return "" + (this.nodeStart(data)) + "\n" + (this.nodeManipulator(data)) + "\n  <!-- ko if: opened -->\n    <!-- ko foreach: attribute_names -->\n      <!-- ko if: ($parent.attributeType($data) == 'simple') -->\n        " + (this.attributeEditor(data)) + "\n      <!-- /ko -->\n\n      <!-- ko if: ($parent.attributeType($data) == 'model') -->\n        " + (this.modelTree(data)) + "\n      <!-- /ko -->\n\n      <!-- ko if: ($parent.attributeType($data) == 'collection') -->\n        " + (this.modelTree(data)) + "\n      <!-- /ko -->\n\n    <!-- /ko -->\n  <!-- /ko -->\n" + (this.nodeEnd(data));
    };

    ModelNodeViewGenerator.prototype.nodeStart = function(data) {
      return "<li class='kbi' data-bind=\"css: {opened: opened, closed: !opened()}\">";
    };

    ModelNodeViewGenerator.prototype.nodeManipulator = function(data) {
      return "<div class='collection' data-bind=\"click: function(){ opened(!opened()) }\">\n  <span data-bind=\"text: (opened() ? '- ' : '+ ' )\"></span>\n  <span data-bind=\"text: name\"></span>\n</div>";
    };

    ModelNodeViewGenerator.prototype.attributeEditor = function(data) {
      return "<fieldset class='kbi'>\n  <label data-bind=\"text: $data\"> </label>\n  <input type='text' data-bind=\"value: $parent.node[$data]\">\n</fieldset>";
    };

    ModelNodeViewGenerator.prototype.modelTree = function(data) {
      return "" + (kbi.ViewHTML.modelTree('$data', false, "$parent.node[$data]"));
    };

    ModelNodeViewGenerator.prototype.collectionTree = function(data) {
      return "" + (kbi.ViewHTML.collectionTree("$data+'[]'", true, "$parent.node[$data]"));
    };

    ModelNodeViewGenerator.prototype.nodeEnd = function(data) {
      return "</li>";
    };

    return ModelNodeViewGenerator;

  })();

  kbi.ViewHTML = (function() {

    function ViewHTML() {}

    ViewHTML.modelTree = function(name, opened, node) {
      return "<ul class='kbi' data-bind=\"template: {name: 'kbi_model_node', data: kbi.nvm(" + name + ", " + opened + ", " + node + ")}\"></ul>";
    };

    ViewHTML.collectionTree = function(data) {
      return "<ul class='kbi' data-bind=\"template: {name: 'kbi_collection_node', data: kbi.nvm(" + name + ", " + opened + ", " + node + ")}\"></ul>";
    };

    return ViewHTML;

  })();

}).call(this);
