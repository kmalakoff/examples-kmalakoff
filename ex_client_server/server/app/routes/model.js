// Generated by CoffeeScript 1.3.3
(function() {
  var Articulation, MyCollection, MyModel, collection, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('underscore');

  Articulation = require('backbone-articulation');

  MyModel = (function(_super) {

    __extends(MyModel, _super);

    function MyModel() {
      return MyModel.__super__.constructor.apply(this, arguments);
    }

    MyModel.factory = function(attributes) {
      if (attributes == null) {
        attributes = {};
      }
      return new MyModel(_.defaults(attributes, {
        id: _.uniqueId('id'),
        name: _.uniqueId('name'),
        created_at: new Date()
      }));
    };

    return MyModel;

  })(Articulation.Model);

  MyCollection = (function(_super) {

    __extends(MyCollection, _super);

    function MyCollection() {
      return MyCollection.__super__.constructor.apply(this, arguments);
    }

    MyCollection.prototype.model = MyModel;

    return MyCollection;

  })(Articulation.Collection);

  collection = new MyCollection();

  collection.add(MyModel.factory());

  collection.add(MyModel.factory());

  collection.add(MyModel.factory());

  exports.index = function(req, res) {
    return res.json(collection.toJSON());
  };

  exports.create = function(req, res) {
    var model;
    model = MyModel.factory();
    model.set(model.parse(req.body));
    collection.add(model);
    return res.json(model.toJSON());
  };

  exports.show = function(req, res) {
    var model;
    model = collection.get(req.body.id);
    return res.json(model ? model.toJSON() : ['FAIL']);
  };

  exports.update = function(req, res) {
    var model;
    model = collection.get(req.body.id);
    if (model != null) {
      model.set(model.parse(req.body));
    }
    return res.json(model ? model.toJSON() : ['FAIL']);
  };

  exports.destroy = function(req, res) {
    var model;
    model = collection.get(req.body.id);
    if (model) {
      collection.remove(model);
    }
    return res.json(model ? ['OK'] : ['FAIL']);
  };

}).call(this);
